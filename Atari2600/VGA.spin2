{
    Atari 2600 Emulator - VGA Driver
    Copyright (c) 2024 by Marco Maccaferri <macca@maccasoft.com>
}

PUB null()

'' This is not an application

PUB start(pn, fbptr) : rc

'' Start driver
''
'' --- pn    ... start pin group
'' --- fbptr ... frame buffer pointer

    _xf := (VGA_FPIX frac CLKFREQ) >> 1
    _pn := pn & $38
    _fb_ptr := fbptr
    rc := coginit(COGEXEC_NEW, @driver, 0)

DAT             ' SVGA 800x600@60Hz Driver
                org     $000

driver
                add     ptrb, #@driver_lut - @driver
                setq2   #(@driver_lut_end - @driver_lut) - 1
                rdlong  0, ptrb

                setcmod #%01_0_000_0          ' enable colorspace conversion
                setcy   ##VGA_INTENSITY << 24 ' r      set colorspace for rgb
                setci   ##VGA_INTENSITY << 16 ' g
                setcq   ##VGA_INTENSITY << 08 ' b
                setxfrq _xf                 ' set transfer frequency

                cogid   _vx                 ' insert cogid into dac modes
                setnib  dacmode_s, _vx, #2
                setnib  dacmode_c, _vx, #2

                wrpin   dacmode_s, _pn      ' enable 123-ohm 3.3V dac mode in pin +0

                xor     _pn, #2 << 6 | 1    ' enable 75-ohm 2.0V dac mode in pins +1..3
                wrpin   dacmode_c, _pn

                xor     _pn, #3 << 6 ^ (2 << 6 | 1) ' make pins +0..3 outputs
                drvl    _pn

                xor     _pn, #4 | (3 << 6)  ' leave av_base pointing to pin +4 (vertical sync)
                drvl    _pn

.field
                drvnot  _pn                 ' vertical sync on
                callpa  #4, #.blank         ' do vertical sync blanks
                drvnot  _pn                 ' vertical sync off

                rdlong  _xf, _fb_ptr   wz
        if_nz   mov     _fb, _xf
        if_nz   wrlong  #0, _fb_ptr

                callpa  #23, #.blank        ' vertical blank

                callpa  #TOP_BORDER_LINES, #.blank ' top border

                mov     ptra, _fb
                mov     _sl, #VISIBLE_LINES

.line
                rdfast  #0, ptra
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
#ifdef _PAL
                xcont   _vr, #0             ' do visible part of scan line
#endif                                      ' |
                rep     @.l1, #160          ' |
                rfbyte  _ch                 ' |
                movbyts _ch, #%%0000        ' |
                xcont   _vi, _ch            ' |
.l1                                         ' |
#ifdef _PAL                                 ' |
                xcont   _vr, #0             ' |
#endif                                      ' |

                rdfast  #0, ptra
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
#ifdef _PAL
                xcont   _vr, #0             ' do visible part of scan line
#endif
                rep     @.l2, #160          ' |
                rfbyte  _ch                 ' |
                movbyts _ch, #%%0000        ' |
                xcont   _vi, _ch            ' |
.l2                                         ' |
#ifdef _PAL                                 ' |
                xcont   _vr, #0             ' |
#endif                                      ' |

                add     ptra, #160
                djnz    _sl, #.line         ' line loop

                callpa  #BOTTOM_BORDER_LINES, #.blank ' bottom border

                callpa  #1, #.blank         ' do bottom blanks

                jmp     #.field             ' frame loop

.blank          xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                xcont   _vb, #0             ' do blank part of scan line
        _ret_   djnz    pa, #.blank         ' loop if more blanks needed

dacmode_s       long    P_DAC_124R_3V + P_CHANNEL ' %0000_0000_000_1011000000000_01_00000_0         'hsync is 123-ohm, 3.3V
dacmode_c       long    P_DAC_75R_2V + P_CHANNEL  ' %0000_0000_000_1011100000000_01_00000_0         'R/G/B are 75-ohm, 2.0V

_pn             long    VGA_BASE_PIN
_xf             long    0 ' (VGA_FPIX frac _CLKFREQ) >> 1
_fb_ptr         long    0
#ifdef _PAL
_bs             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  40   ' streamer command: before sync
_ds             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 + 128   ' streamer command: sync
_bv             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  88   ' streamer command: before visible
_vb             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 + 800   ' streamer command: blank

_vi             long    X_IMM_4X8_LUT    | X_DACS_3_2_1_0 +   4   ' streamer command: visible
_vr             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  80   ' streamer command: border
#else
_bs             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  16   ' streamer command: before sync
_ds             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  96   ' streamer command: sync
_bv             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  48   ' streamer command: before visible
_vb             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 + 640   ' streamer command: blank

_vi             long    X_IMM_4X8_LUT    | X_DACS_3_2_1_0 +   4   ' streamer command: visible
'_vr             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +   0   ' streamer command: border
#endif

_fb             long    0
_sl             long    0
_vx             long    0
_ch             long    0

DAT
                org     $200

driver_lut
#ifdef _PAL
                long    $000000_00, $282828_00, $505050_00, $747474_00, $949494_00, $B4B4B4_00, $D0D0D0_00, $F1F1F1_00
                long    $000000_00, $282828_00, $505050_00, $747474_00, $949494_00, $B4B4B4_00, $D0D0D0_00, $F1F1F1_00
                long    $805800_00, $947020_00, $A8843C_00, $BC9C58_00, $CCAC70_00, $DCC084_00, $ECD09C_00, $FCE0B0_00
                long    $445C00_00, $5C7820_00, $74903C_00, $8CAC58_00, $A0C070_00, $B0D484_00, $C4E89C_00, $D4FCB0_00
                long    $703400_00, $885020_00, $A0683C_00, $B48458_00, $C89870_00, $DCAC84_00, $ECC09C_00, $FCD4B0_00
                long    $006414_00, $208034_00, $3C9850_00, $58B06C_00, $70C484_00, $84D89C_00, $9CE8B4_00, $B0FCC8_00
                long    $700014_00, $882034_00, $A03C50_00, $B4586C_00, $C87084_00, $DC849C_00, $EC9CB4_00, $FCB0C8_00
                long    $005C5C_00, $207474_00, $3C8C8C_00, $58A4A4_00, $70B8B8_00, $84C8C8_00, $9CDCDC_00, $B0ECEC_00
                long    $70005C_00, $842074_00, $943C88_00, $A8589C_00, $B470B0_00, $C484C0_00, $D09CD0_00, $E0B0E0_00
                long    $003C70_00, $1C5888_00, $3874A0_00, $508CB4_00, $68A4C8_00, $7CB8DC_00, $90CCEC_00, $A4E0FC_00
                long    $580070_00, $6C2088_00, $803CA0_00, $9458B4_00, $A470C8_00, $B484DC_00, $C49CEC_00, $D4B0FC_00
                long    $002070_00, $1C3C88_00, $3858A0_00, $5074B4_00, $6888C8_00, $7CA0DC_00, $90B4EC_00, $A4C8FC_00
                long    $3C0080_00, $542094_00, $6C3CA8_00, $8058BC_00, $9470CC_00, $A884DC_00, $B89CEC_00, $C8B0FC_00
                long    $000088_00, $20209C_00, $3C3CB0_00, $5858C0_00, $7070D0_00, $8484E0_00, $9C9CEC_00, $B0B0FC_00
                long    $000000_00, $282828_00, $505050_00, $747474_00, $949494_00, $B4B4B4_00, $D0D0D0_00, $F1F1F1_00
                long    $000000_00, $282828_00, $505050_00, $747474_00, $949494_00, $B4B4B4_00, $D0D0D0_00, $F1F1F1_00
#else
                long    $000000_00, $404040_00, $6C6C6C_00, $909090_00, $B0B0B0_00, $C8C8C8_00, $DCDCDC_00, $F4F4F4_00
                long    $444400_00, $646410_00, $848424_00, $A0A034_00, $B8B840_00, $D0D050_00, $E8E85C_00, $FCFC68_00
                long    $702800_00, $844414_00, $985C28_00, $AC783C_00, $BC8C4C_00, $CCA05C_00, $DCB468_00, $ECC878_00
                long    $841800_00, $983418_00, $AC5030_00, $C06848_00, $D0805C_00, $E09470_00, $ECA880_00, $FCBC94_00
                long    $880000_00, $9C2020_00, $B03C3C_00, $C05858_00, $D07070_00, $E08888_00, $ECA0A0_00, $FCB4B4_00
                long    $78005C_00, $8C2074_00, $A03C88_00, $B0589C_00, $C070B0_00, $D084C0_00, $DC9CD0_00, $ECB0E0_00
                long    $480078_00, $602090_00, $783CA4_00, $8C58B8_00, $A070CC_00, $B484DC_00, $C49CEC_00, $D4B0FC_00
                long    $140084_00, $302098_00, $4C3CAC_00, $6858C0_00, $7C70D0_00, $9488E0_00, $A8A0EC_00, $BCB4FC_00
                long    $000088_00, $1C209C_00, $3840B0_00, $505CC0_00, $6874D0_00, $7C8CE0_00, $90A4EC_00, $A4B8FC_00
                long    $00187C_00, $1C3890_00, $3854A8_00, $5070BC_00, $6888CC_00, $7C9CDC_00, $90B4EC_00, $A4C8FC_00
                long    $002C5C_00, $1C4C78_00, $386890_00, $5084AC_00, $689CC0_00, $7CB4D4_00, $90CCE8_00, $A4E0FC_00
                long    $003C2C_00, $1C5C48_00, $387C64_00, $509C80_00, $68B494_00, $7CD0AC_00, $90E4C0_00, $A4FCD4_00
                long    $003C00_00, $205C20_00, $407C40_00, $5C9C5C_00, $74B474_00, $8CD08C_00, $A4E4A4_00, $B8FCB8_00
                long    $143800_00, $345C1C_00, $507C38_00, $6C9850_00, $84B468_00, $9CCC7C_00, $B4E490_00, $C8FCA4_00
                long    $2C3000_00, $4C501C_00, $687034_00, $848C4C_00, $9CA864_00, $B4C078_00, $CCD488_00, $E0EC9C_00
                long    $442800_00, $644818_00, $846830_00, $A08444_00, $B89C58_00, $D0B46C_00, $E8CC7C_00, $FCE08C_00
#endif
driver_lut_end

CON ' VGA constants

    VGA_BASE_PIN = 48
    VGA_INTENSITY = 80    '0..128
#ifdef _PAL
    VGA_FPIX = 40_000_000
    VISIBLE_LINES = 228
    TOP_BORDER_LINES = (600 - (VISIBLE_LINES * 2)) / 2
    BOTTOM_BORDER_LINES = 600 - (VISIBLE_LINES * 2) - TOP_BORDER_LINES
#else
    VGA_FPIX = 25_175_000
    VISIBLE_LINES = 210
    TOP_BORDER_LINES = (480 - (VISIBLE_LINES * 2)) / 2
    BOTTOM_BORDER_LINES = 480 - (VISIBLE_LINES * 2) - TOP_BORDER_LINES
#endif
