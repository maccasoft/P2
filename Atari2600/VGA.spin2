{
    Atari 2600 Emulator - VGA Driver
    Copyright (c) 2024 by Marco Maccaferri <macca@maccasoft.com>
}

VAR

    byte fg
    byte bg
    byte fb_text[640 * 240]

PUB null()

'' This is not an application

PUB start(pn, fbptr) : rc

'' Start driver
''
'' --- pn    ... start pin group
'' --- fbptr ... frame buffer pointer

    bytefill(@fb_text, $00, 640 * 240)

    fg := $87
    bg := $80

    _xf := (VGA_FPIX frac CLKFREQ) >> 1
    _pn := pn & $38
    _fb_ptr := fbptr

    _fb_ovl := @fb_text

    'prints_at((80 - 12) / 2, 3, " Atari 2600 ")
    'print_at(0, 29, "A")

    rc := coginit(COGEXEC_NEW, @driver, 0)

PUB clear()

    bytefill(@fb_text, $00, 640 * 240)

PUB print_at(x, y, ch) | vptr, fptr, b, _fg, _bg

    _fg := fg
    _bg := bg

    vptr := @fb_text + (y * 640 * 8) + x * 8
    fptr := @font + ch * 8

    org
            mov     cnt, #8
    .loop   rdbyte  b, fptr
            mov     bit, #7
            rep     @.l1, #8
            testb   b, bit      wz
    if_x1   wrbyte  _fg, vptr
    if_x0   wrbyte  _bg, vptr
            add     vptr, #1
            sub     bit, #1
    .l1     add     vptr, ##640-8
            add     fptr, #1
            djnz    cnt, #.loop

    cnt     long    0
    bit     long    0
    end

PUB prints_at(x, y, sptr)

    repeat strsize(sptr)
        print_at(x++, y, byte[sptr++])

PUB set_colors(_fg, _bg)

    fg := _fg
    bg := _bg

PUB box(x, y, w, h) | i, c

    print_at(x, y, $DA)
    repeat i from x + 1 to x + w - 1
        print_at(i, y, $C4)
    print_at(x + w - 1, y, $BF)

    repeat c from y + 1 to y + h - 1
        print_at(x, c, $B3)
        repeat i from x + 1 to x + w - 2
            print_at(i, c, $20)
        print_at(x + w - 1, c, $B3)

    print_at(x, y + h - 1, $C0)
    repeat i from x + 1 to x + w - 1
        print_at(i, y + h - 1, $C4)
    print_at(x + w - 1, y + h - 1, $D9)

PUB fill_with_color(c)

    bytefill(@fb_text, c, 640 * 240)

DAT
                org     $000

driver
                mov     _ch, ##@driver_lut_end - 4 - @driver_lut ' Dealing with hub addresses
                shr     _ch, #2                        ' so byte->long for the lut cell count
                loc     pb, #@driver_lut - @driver
                add     pb, ptrb
                setq2   _ch
                rdlong  0, pb                           ' Do the hub->lut copy

                setcmod #%01_0_000_0          ' enable colorspace conversion
                setcy   ##VGA_INTENSITY << 24 ' r      set colorspace for rgb
                setci   ##VGA_INTENSITY << 16 ' g
                setcq   ##VGA_INTENSITY << 08 ' b
                setxfrq _xf                 ' set transfer frequency

                cogid   _vx                 ' insert cogid into dac modes
                setnib  dacmode_s, _vx, #2
                setnib  dacmode_c, _vx, #2

                wrpin   dacmode_s, _pn      ' enable 123-ohm 3.3V dac mode in pin +0

                xor     _pn, #2 << 6 | 1    ' enable 75-ohm 2.0V dac mode in pins +1..3
                wrpin   dacmode_c, _pn

                xor     _pn, #3 << 6 ^ (2 << 6 | 1) ' make pins +0..3 outputs
                drvl    _pn

                xor     _pn, #4 | (3 << 6)  ' leave av_base pointing to pin +4 (vertical sync)
                drvl    _pn

_field
                mov     ptrb, _fb_ovl

                mov     _sl, #TOP_BORDER_LINES / 2
_top
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l1, #160          ' do visible part of scan line
                rdlong  _ch, ptrb++
                xcont   _vi, _ch            ' |
.l1
                sub     ptrb, ##160 * 4
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l2, #160          ' do visible part of scan line
                rdlong  _ch, ptrb++
                xcont   _vi, _ch            ' |
.l2
                djnz    _sl, #_top

                mov     ptra, _fb
                mov     _sl, #VISIBLE_LINES

_line
                rdfast  #0, ptra
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l1, #160          ' do visible part of scan line

                rfbyte  _ch                 ' |
                movbyts _ch, #%%0000        ' |

                rdlong  _ch_ovl, ptrb++
                test    _ch_ovl, b0     wz
        if_nz   getbyte _tmp, _ch_ovl, #0
        if_nz   setbyte _ch, _tmp, #0
                test    _ch_ovl, b1     wz
        if_nz   getbyte _tmp, _ch_ovl, #1
        if_nz   setbyte _ch, _tmp, #1
                test    _ch_ovl, b2     wz
        if_nz   getbyte _tmp, _ch_ovl, #2
        if_nz   setbyte _ch, _tmp, #2
                test    _ch_ovl, b3     wz
        if_nz   getbyte _tmp, _ch_ovl, #3
        if_nz   setbyte _ch, _tmp, #3

                xcont   _vi, _ch            ' |
.l1
                sub     ptrb, ##160 * 4
                rdfast  #0, ptra
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l2, #160          ' do visible part of scan line

                rfbyte  _ch                 ' |
                movbyts _ch, #%%0000        ' |

                rdlong  _ch_ovl, ptrb++
                test    _ch_ovl, b0     wz
        if_nz   getbyte _tmp, _ch_ovl, #0
        if_nz   setbyte _ch, _tmp, #0
                test    _ch_ovl, b1     wz
        if_nz   getbyte _tmp, _ch_ovl, #1
        if_nz   setbyte _ch, _tmp, #1
                test    _ch_ovl, b2     wz
        if_nz   getbyte _tmp, _ch_ovl, #2
        if_nz   setbyte _ch, _tmp, #2
                test    _ch_ovl, b3     wz
        if_nz   getbyte _tmp, _ch_ovl, #3
        if_nz   setbyte _ch, _tmp, #3

                xcont   _vi, _ch            ' |
.l2

                add     ptra, #160
                djnz    _sl, #_line         ' line loop

                mov     _sl, #BOTTOM_BORDER_LINES / 2
_bottom
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l1, #160          ' do visible part of scan line
                rdlong  _ch, ptrb++
                xcont   _vi, _ch            ' |
.l1
                sub     ptrb, ##160 * 4
                xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                rep     @.l2, #160          ' do visible part of scan line
                rdlong  _ch, ptrb++
                xcont   _vi, _ch            ' |
.l2
                djnz    _sl, #_bottom

                callpa  #10, #_blank        ' front porch

                drvnot  _pn                 ' vertical sync on
                callpa  #2, #_blank         ' |
                drvnot  _pn                 ' vertical sync off

                rdlong  _xf, _fb_ptr   wz
        if_nz   mov     _fb, _xf
        if_nz   wrlong  #0, _fb_ptr

                callpa  #33, #_blank        ' back porch

                jmp     #_field             ' frame loop

_blank          xcont   _bs, #0             ' do before-sync part of scan line
                xzero   _ds, #1             ' do sync part of scan line
                xcont   _bv, #0             ' do before-visible part of scan line
                xcont   _vb, #0             ' do blank part of scan line
        _ret_   djnz    pa, #_blank         ' loop if more blanks needed

dacmode_s       long    P_DAC_124R_3V + P_CHANNEL ' %0000_0000_000_1011000000000_01_00000_0         'hsync is 123-ohm, 3.3V
dacmode_c       long    P_DAC_75R_2V + P_CHANNEL  ' %0000_0000_000_1011100000000_01_00000_0         'R/G/B are 75-ohm, 2.0V

b0              long    $00_00_00_FF
b1              long    $00_00_FF_00
b2              long    $00_FF_00_00
b3              long    $FF_00_00_00

_pn             long    VGA_BASE_PIN
_xf             long    0 ' (VGA_FPIX frac _CLKFREQ) >> 1
_fb_ptr         long    0
_bs             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  16   ' streamer command: before sync
_ds             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  96   ' streamer command: sync
_bv             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +  48   ' streamer command: before visible
_vb             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 + 640   ' streamer command: blank

_vi             long    X_IMM_4X8_LUT    | X_DACS_3_2_1_0 +   4   ' streamer command: visible
'_vr             long    X_IMM_1X32_4DAC8 | X_DACS_3_2_1_0 +   0   ' streamer command: border

_fb             long    0
_sl             long    0
_vx             long    0
_ch             long    0

_fb_ovl         long    0
_ch_ovl         long    0
_tmp            long    0

                fit     $1F0

DAT
                org     $200

driver_lut
                long    $000000_00, $404040_00, $6C6C6C_00, $909090_00, $B0B0B0_00, $C8C8C8_00, $DCDCDC_00, $F4F4F4_00
                long    $444400_00, $646410_00, $848424_00, $A0A034_00, $B8B840_00, $D0D050_00, $E8E85C_00, $FCFC68_00
                long    $702800_00, $844414_00, $985C28_00, $AC783C_00, $BC8C4C_00, $CCA05C_00, $DCB468_00, $ECC878_00
                long    $841800_00, $983418_00, $AC5030_00, $C06848_00, $D0805C_00, $E09470_00, $ECA880_00, $FCBC94_00
                long    $880000_00, $9C2020_00, $B03C3C_00, $C05858_00, $D07070_00, $E08888_00, $ECA0A0_00, $FCB4B4_00
                long    $78005C_00, $8C2074_00, $A03C88_00, $B0589C_00, $C070B0_00, $D084C0_00, $DC9CD0_00, $ECB0E0_00
                long    $480078_00, $602090_00, $783CA4_00, $8C58B8_00, $A070CC_00, $B484DC_00, $C49CEC_00, $D4B0FC_00
                long    $140084_00, $302098_00, $4C3CAC_00, $6858C0_00, $7C70D0_00, $9488E0_00, $A8A0EC_00, $BCB4FC_00
                long    $000088_00, $1C209C_00, $3840B0_00, $505CC0_00, $6874D0_00, $7C8CE0_00, $90A4EC_00, $A4B8FC_00
                long    $00187C_00, $1C3890_00, $3854A8_00, $5070BC_00, $6888CC_00, $7C9CDC_00, $90B4EC_00, $A4C8FC_00
                long    $002C5C_00, $1C4C78_00, $386890_00, $5084AC_00, $689CC0_00, $7CB4D4_00, $90CCE8_00, $A4E0FC_00
                long    $003C2C_00, $1C5C48_00, $387C64_00, $509C80_00, $68B494_00, $7CD0AC_00, $90E4C0_00, $A4FCD4_00
                long    $003C00_00, $205C20_00, $407C40_00, $5C9C5C_00, $74B474_00, $8CD08C_00, $A4E4A4_00, $B8FCB8_00
                long    $143800_00, $345C1C_00, $507C38_00, $6C9850_00, $84B468_00, $9CCC7C_00, $B4E490_00, $C8FCA4_00
                long    $2C3000_00, $4C501C_00, $687034_00, $848C4C_00, $9CA864_00, $B4C078_00, $CCD488_00, $E0EC9C_00
                long    $442800_00, $644818_00, $846830_00, $A08444_00, $B89C58_00, $D0B46C_00, $E8CC7C_00, $FCE08C_00

text_palette                        ' h rgb
{$80}           long    $000000_00  ' 0 000     0
                long    $0000AA_00  ' 0 001     1
                long    $00AA00_00  ' 0 010     2
                long    $00AAAA_00  ' 0 011     3
                long    $AA0000_00  ' 0 100     4
                long    $AA00AA_00  ' 0 101     5
                long    $AA5500_00  ' 0 110     6
                long    $AAAAAA_00  ' 0 111     7
                long    $555555_00  ' 1 000     8
                long    $5555FF_00  ' 1 001     9
                long    $55FF55_00  ' 1 010     A
                long    $55FFFF_00  ' 1 011     B
                long    $FF5555_00  ' 1 100     C
                long    $FF55FF_00  ' 1 101     D
                long    $FFFF55_00  ' 1 110     E
                long    $FFFFFF_00  ' 1 111     F

driver_lut_end

DAT
                orgh

font            file    "CGA.F08"

CON ' VGA constants

    VGA_BASE_PIN = 48
    VGA_INTENSITY = 80    '0..128
    VGA_FPIX = 25_175_000
    VISIBLE_LINES = 210
    TOP_BORDER_LINES = (480 - (VISIBLE_LINES * 2)) / 2
    BOTTOM_BORDER_LINES = 480 - (VISIBLE_LINES * 2) - TOP_BORDER_LINES
